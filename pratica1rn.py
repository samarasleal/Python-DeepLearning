# -*- coding: utf-8 -*-
"""pratica1RN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G3Smk4K_rsMGKYEP2r0BHVmiDVrbX0dV
"""

from sklearn.preprocessing import LabelBinarizer
from sklearn.metrics import classification_report
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.datasets import mnist
from tensorflow.keras import backend as K
import matplotlib.pyplot as plt
import numpy as np

# Dataset
((trainX, trainY), (testX, testY)) = mnist.load_data()
# Preparando os dados - 28 pixels de largura e altura - Normalização
trainX = trainX.reshape(trainX.shape[0], 28 * 28 * 1)
testX = testX.reshape(testX.shape[0], 28 * 28 * 1)
trainX = trainX.astype('float32') / 255.0
testX = testX.astype('float32') / 255.0
# Binarização - Método usado para regularizar as classes do modelo
lb = LabelBinarizer()
trainY = lb.fit_transform(trainY)
testY = lb.transform(testY)

# Rede - Criação das camadas
# Camada densa: cada neurônio de uma camada se conecta com todos da próxima camada
# Base de construção de camadas
model = Sequential()
model.add(Dense(256, input_shape=(784,), activation='sigmoid'))
model.add(Dense(128, activation='sigmoid'))
# 10 classes
model.add(Dense(10, activation='softmax'))

# Criando o otimizador do gradiente descendente tradicional
sgd = SGD(0.01)
model.compile(loss = "categorical_crossentropy", optimizer=sgd, metrics=['accuracy'])
# Treinamento
H = model.fit(trainX, trainY, validation_data=(testX, testY), epochs=100, batch_size=128)

# Predição
predictions = model.predict(testX, batch_size=128)
print(classification_report(testY.argmax(axis=1), predictions.argmax(axis=1), target_names= [str(x) for x in lb.classes_]))

# Plotar o gráfico
plt.style.use('ggplot')
plt.figure()
plt.plot(np.arange(0, 100), H.history['loss'], label='train_loss')
plt.plot(np.arange(0, 100), H.history['val_loss'], label='val_loss')
plt.plot(np.arange(0, 100), H.history['accuracy'], label='train_acc')
plt.plot(np.arange(0, 100), H.history['val_accuracy'], label='val_acc')
plt.title('Training Loss and Accuracy')
plt.xlabel('Epoch #')
plt.ylabel('Loss/Accuracy')
plt.legend()